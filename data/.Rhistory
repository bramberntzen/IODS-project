dim(human)
# Access dplyr and stringr
library(dplyr)
library(stringr)
# mutate GNI in human with a string command to remove the commas used to indicate thousands and turning them into numeric variables
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
# keep only the variables we're interested in: "Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F"
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human <- select(human, one_of(keep))
# check for missing values (FALSE indicates this)
complete.cases(human)
# include a missing value indicator column to the dataset
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with missing values (NA) and indicated with FALSE in the last column
human_ <- filter(human, complete.cases(human))
# look at the last 10 observations of human, it seems like the last 7 variables are regions
tail(human_, n=10)
# Define the last 7 variables, which contain regional info
last <- nrow(human_) - 7
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
dim(human_)
# add countries as rownames
rownames(human_) <- human_$Country
# remove the Country variable
human_ <- select(human_, -Country)
str(human_)
dim(human_)
knitr::opts_chunk$set(echo = TRUE)
# Access GGally
library(GGally)
# visualize the 'human_' variables
ggpairs(human_)
# compute the correlation matrix and visualize it with corrplot
cor(human_) %>% corrplot()
dim(human_)
read.table("create_human.R")
read("create_human.R")
read.csv("create_human.R")
# save dataset as 'human'
write.table(learning2014, file = "human.txt", sep = " ", dec=".", row.names = FALSE, col.names = TRUE)
#Read .txt file
learning2014 <- read.table(file = "human.txt", header = TRUE, dec = ".")
dim(learning2014)
dim(human_)
#Read .txt file
human_ <- read.table(file = "human.txt", header = TRUE, dec = ".")
dim(human_)
#Read .txt file
human_ <- read.table(file = "human.txt", header = TRUE, dec = ".")
dim(human_)
# save dataset as 'human'
write.table(human, file = "human.txt", sep = " ", dec=".", row.names = TRUE, col.names = FALSE)
#Read .txt file
human_ <- read.table(file = "human.txt", header = TRUE, dec = ".")
dim(human_)
# I did not finish last week's data wrangling so I'm loading the prepared human data
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep  =",", header = T)
# structure shows all variables and observations in human and includes info on human development and gender inequality
str(human)
# the human dataset contains 195 observation of 19 variables
dim(human)
# Access dplyr and stringr
library(dplyr)
library(stringr)
# mutate GNI in human with a string command to remove the commas used to indicate thousands and turning them into numeric variables
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
# keep only the variables we're interested in: "Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F"
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human <- select(human, one_of(keep))
# check for missing values (FALSE indicates this)
complete.cases(human)
# include a missing value indicator column to the dataset
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with missing values (NA) and indicated with FALSE in the last column
human_ <- filter(human, complete.cases(human))
# look at the last 10 observations of human, it seems like the last 7 variables are regions
tail(human_, n=10)
# Define the last 7 variables, which contain regional info
last <- nrow(human_) - 7
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
dim(human_)
# add countries as rownames
rownames(human_) <- human_$Country
# remove the Country variable
human_ <- select(human_, -Country)
# confirmation that data has 155 observations of 8 variables
dim(human_)
# save dataset as 'human'
write.table(human, file = "human.txt", sep = " ", dec=".", row.names = FALSE, col.names = FALSE)
#Read .txt file
human_ <- read.table(file = "human.txt", header = TRUE, dec = ".")
dim(human_)
# I did not finish last week's data wrangling so I'm loading the prepared human data
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep  =",", header = T)
# structure shows all variables and observations in human and includes info on human development and gender inequality
str(human)
# the human dataset contains 195 observation of 19 variables
dim(human)
# Access dplyr and stringr
library(dplyr)
library(stringr)
# mutate GNI in human with a string command to remove the commas used to indicate thousands and turning them into numeric variables
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
# keep only the variables we're interested in: "Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F"
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human <- select(human, one_of(keep))
# check for missing values (FALSE indicates this)
complete.cases(human)
# include a missing value indicator column to the dataset
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with missing values (NA) and indicated with FALSE in the last column
human_ <- filter(human, complete.cases(human))
# look at the last 10 observations of human, it seems like the last 7 variables are regions
tail(human_, n=10)
# Define the last 7 variables, which contain regional info
last <- nrow(human_) - 7
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
dim(human_)
# add countries as rownames
rownames(human_) <- human_$Country
# remove the Country variable
human_ <- select(human_, -Country)
# confirmation that data has 155 observations of 8 variables
dim(human_)
# save dataset as 'human'
write.table(human, file = "human.txt", sep = " ", dec=".")
#Read .txt file
human_ <- read.table(file = "human.txt",dec = ".")
dim(human_)
# I did not finish last week's data wrangling so I'm loading the prepared human data
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep  =",", header = T)
# structure shows all variables and observations in human and includes info on human development and gender inequality
str(human)
# the human dataset contains 195 observation of 19 variables
dim(human)
# Access dplyr and stringr
library(dplyr)
library(stringr)
# mutate GNI in human with a string command to remove the commas used to indicate thousands and turning them into numeric variables
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
# keep only the variables we're interested in: "Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F"
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human <- select(human, one_of(keep))
# check for missing values (FALSE indicates this)
complete.cases(human)
# include a missing value indicator column to the dataset
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with missing values (NA) and indicated with FALSE in the last column
human_ <- filter(human, complete.cases(human))
# look at the last 10 observations of human, it seems like the last 7 variables are regions
tail(human_, n=10)
# Define the last 7 variables, which contain regional info
last <- nrow(human_) - 7
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
dim(human_)
# add countries as rownames
rownames(human_) <- human_$Country
# remove the Country variable
human_ <- select(human_, -Country)
# confirmation that data has 155 observations of 8 variables
dim(human_)
#set working directory
setwd("C:/Users/Bram/Desktop/Open data science course/GitHub/IODS-project/data")
# save dataset as 'human'
write.table(human, file = "human.txt", sep = " ", dec=".")
#Read .txt file
human_ <- read.table(file = "human.txt",dec = ".")
dim(human_)
# I did not finish last week's data wrangling so I'm loading the prepared human data
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep  =",", header = T)
# structure shows all variables and observations in human and includes info on human development and gender inequality
str(human)
# the human dataset contains 195 observation of 19 variables
dim(human)
# Access dplyr and stringr
library(dplyr)
library(stringr)
# mutate GNI in human with a string command to remove the commas used to indicate thousands and turning them into numeric variables
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
# keep only the variables we're interested in: "Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F"
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human <- select(human, one_of(keep))
# check for missing values (FALSE indicates this)
complete.cases(human)
# include a missing value indicator column to the dataset
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with missing values (NA) and indicated with FALSE in the last column
human_ <- filter(human, complete.cases(human))
# look at the last 10 observations of human, it seems like the last 7 variables are regions
tail(human_, n=10)
# Define the last 7 variables, which contain regional info
last <- nrow(human_) - 7
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
dim(human_)
# add countries as rownames
rownames(human_) <- human_$Country
# remove the Country variable
human_ <- select(human_, -Country)
# confirmation that data has 155 observations of 8 variables
dim(human_)
#Figure out which working directory is used by R and change it to the IODS prohect folder through "Session", "set working directory", "choose directory" -> "IODS project folder"
getwd()
# set working directory
setwd("C:/Users/Bram/Desktop/Open data science course/GitHub/IODS-project/data")
# save dataset as 'human'
write.table(human, file = "human.txt", sep = " ", dec=".", row.names = FALSE, col.names = TRUE)
# read .txt file
human <- read.table(file = "human.txt", header = TRUE, dec = ".")
dim(human)
# I did not finish last week's data wrangling so I'm loading the prepared human data
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep  =",", header = T)
# structure shows all variables and observations in human and includes info on human development and gender inequality
str(human)
# the human dataset contains 195 observation of 19 variables
dim(human)
# Access dplyr and stringr
library(dplyr)
library(stringr)
# mutate GNI in human with a string command to remove the commas used to indicate thousands and turning them into numeric variables
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
# keep only the variables we're interested in: "Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F"
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human <- select(human, one_of(keep))
# check for missing values (FALSE indicates this)
complete.cases(human)
# include a missing value indicator column to the dataset
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with missing values (NA) and indicated with FALSE in the last column
human_ <- filter(human, complete.cases(human))
# look at the last 10 observations of human, it seems like the last 7 variables are regions
tail(human_, n=10)
# Define the last 7 variables, which contain regional info
last <- nrow(human_) - 7
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
dim(human_)
# add countries as rownames
rownames(human_) <- human_$Country
# remove the Country variable
human_ <- select(human_, -Country)
# confirmation that data has 155 observations of 8 variables
dim(human_)
#Figure out which working directory is used by R and change it to the IODS prohect folder through "Session", "set working directory", "choose directory" -> "IODS project folder"
getwd()
# set working directory
setwd("C:/Users/Bram/Desktop/Open data science course/GitHub/IODS-project/")
# save dataset as 'human'
write.table(human, file = "human.txt", sep = " ", dec=".", row.names = FALSE, col.names = TRUE)
# read .txt file
human <- read.table(file = "human.txt", header = TRUE, dec = ".")
dim(human)
# I did not finish last week's data wrangling so I'm loading the prepared human data
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep  =",", header = T)
# structure shows all variables and observations in human and includes info on human development and gender inequality
str(human)
# the human dataset contains 195 observation of 19 variables
dim(human)
# Access dplyr and stringr
library(dplyr)
library(stringr)
# mutate GNI in human with a string command to remove the commas used to indicate thousands and turning them into numeric variables
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
# keep only the variables we're interested in: "Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F"
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human <- select(human, one_of(keep))
# check for missing values (FALSE indicates this)
complete.cases(human)
# include a missing value indicator column to the dataset
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with missing values (NA) and indicated with FALSE in the last column
human_ <- filter(human, complete.cases(human))
# look at the last 10 observations of human, it seems like the last 7 variables are regions
tail(human_, n=10)
# Define the last 7 variables, which contain regional info
last <- nrow(human_) - 7
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
dim(human_)
# add countries as rownames
rownames(human_) <- human_$Country
# remove the Country variable
human_ <- select(human_, -Country)
# confirmation that data has 155 observations of 8 variables
dim(human_)
#Figure out which working directory is used by R and change it to the IODS prohect folder through "Session", "set working directory", "choose directory" -> "IODS project folder"
getwd()
# set working directory
setwd("C:/Users/Bram/Desktop/Open data science course/GitHub/IODS-project/")
# save dataset as 'human'
write.table(human_, file = "human_.txt", sep = " ", dec=".", row.names = FALSE, col.names = TRUE)
# read .txt file
human_ <- read.table(file = "human_.txt", header = TRUE, dec = ".")
dim(human_)
# confirm that saving and reopening of the file went correctly
str(human)
# I did not finish last week's data wrangling so I'm loading the prepared human data
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep  =",", header = T)
# structure shows all variables and observations in human and includes info on human development and gender inequality
str(human)
# the human dataset contains 195 observation of 19 variables
dim(human)
# Access dplyr and stringr
library(dplyr)
library(stringr)
# mutate GNI in human with a string command to remove the commas used to indicate thousands and turning them into numeric variables
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
# keep only the variables we're interested in: "Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F"
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human <- select(human, one_of(keep))
# check for missing values (FALSE indicates this)
complete.cases(human)
# include a missing value indicator column to the dataset
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with missing values (NA) and indicated with FALSE in the last column
human_ <- filter(human, complete.cases(human))
# look at the last 10 observations of human, it seems like the last 7 variables are regions
tail(human_, n=10)
# Define the last 7 variables, which contain regional info
last <- nrow(human_) - 7
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
dim(human_)
# add countries as rownames
rownames(human_) <- human_$Country
# remove the Country variable
human_ <- select(human_, -Country)
# confirmation that data has 155 observations of 8 variables
dim(human_)
#Figure out which working directory is used by R and change it to the IODS prohect folder through "Session", "set working directory", "choose directory" -> "IODS project folder"
getwd()
# set working directory
setwd("C:/Users/Bram/Desktop/Open data science course/GitHub/IODS-project/data")
# save dataset as 'human'
write.table(human_, file = "human_.txt", sep = " ", dec=".", row.names = FALSE, col.names = TRUE)
# read .txt file
human_ <- read.table(file = "human_.txt", header = TRUE, dec = ".")
# confirm that saving and reopening of the file went correctly
str(human)
dim(human_)
# read .txt file
human_ <- read.table(file = "human_.txt", header = TRUE, dec = ".")
# confirm that saving and reopening of the file went correctly
str(human_)
# read .txt file
human_ <- read.table(file = "human_.txt", header = TRUE, dec = ".")
# confirm that saving and reopening of the file went correctly
str(human)
# confirm that saving and reopening of the file went correctly
str(human_)
# Access GGally
library(GGally)
# visualize the 'human_' variables
ggpairs(human_)
# visualize and summarize the 'human_' variables
ggpairs(human_)
# visualize and summarize the 'human_' variables
ggpairs(human_)
summary(human_)
hist(human)
hist(human$)
hist(human$vars)
hist(human$GNI)
hist(human$.)
hist(human$)
hist(human$,)
hist(human$all)
hist.data.frame(human)
library(ggplot2)
hist.data.frame(human)
library(ggplot2)
hist.data.frame(human_)
library(GGally)
hist.data.frame(human_)
library(Hmisc)
hist.data.frame(human_)
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
hist.data.frame(human_)
# visualize and summarize the 'human_' variables
ggpairs(human_)
# Read the "Human development" and "Gender inequality" datasets into R
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#Exploration of datasets
str(hd)
dim(hd)
str(gii)
summary(human_)
library(Hmisc)
hist.data.frame(human_)
# perform principal component analysis (with the singular value decomposition method; SVD)
prcomp(human_)
# perform principal component analysis (with the singular value decomposition method; SVD)
prcomp(human_) %>% summary
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
# perform principal component analysis (with the singular value decomposition method; SVD)
pca_human1 <- prcomp(human_) %>% summary
biplot(pca_human1, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
human_std <- scale(human)
human_std <- scale(human_)
# print out summaries of the standardized variables
summary(human_std)
# perform principal component analysis (with the SVD method)
pca_human <- prcomp(human_std)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
# perform principal component analysis (with the singular value decomposition method; SVD)
pca_human1 <- prcomp(human_)
biplot(pca_human1, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
# standardize human
human_std <- scale(human_)
# print out summaries of the standardized variables
summary(human_std)
# print out summaries of the standardized variables
summary(human_std)
# perform principal component analysis (with the SVD method)
pca_human2 <- prcomp(human_std)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
# perform principal component analysis (with the singular value decomposition method; SVD) on the not standardized human data
pca_human1 <- prcomp(human_)
biplot(pca_human1, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
pca_human1
summary(pca_human1)
biplot(pca_human1, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
# standardize human
human_std <- scale(human_)
# print out summaries of the standardized variables
summary(human_std)
# perform principal component analysis (with the SVD method)
pca_human2 <- prcomp(human_std)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), heading = B)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), header = B)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), header = "B")
?biplot
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), main="Main title")
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), main="PCA human")
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2")) + title("PCA", line = +2)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2")) + title("PCA", line = -2)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2")) + title("PCA", line = +5)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2")) + title("PCA", line = +0.5)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2")) + title("PCA", line = +1.5)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2")) + title("PCA", line = +1)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2")) + title("PCA")
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2")) + title("PCA", line = -0.5)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), main("PCA"))
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), main = "PCA")
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), main = "PCA", line = 1)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), main = "PCA")
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), par(c("font.sub", "cex.sub", "col.sub")))
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), sub = "hello"))
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), sub = "hello")
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), sub = "In this figure the first two principal components are shown from the principal component analysis. It seems like labour force participation ratio and representation in the parliament are closely associated. Also, maternal mortality ratio and  adolescent birth rate are correlated, and the third grouping seems to be of expected years of education, gender inequality, and life expectancy at birth")
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), sub = "In this figure the first two principal components are shown from the principal component analysis. It seems like labour force participation ratio and representation in the parliament are closely associated. Also, maternal mortality ratio and  adolescent birth rate are correlated, and the third grouping seems to be of expected years of education, gender inequality, and life expectancy at birth", text(x, y = NULL, labels = seq_along(x$x), adj = NULL,
pos = NULL, offset = 0.5, vfont = NULL,
cex = 1, col = NULL, font = NULL, ...))
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), sub = "PCA of human development and gender inequality")
str(human_)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human2, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), sub = "PCA of human development and gender inequality")
install.packages("FactoMiner")
install.packages("FactoMineR")
library(FactoMineR)
data(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# tea_time is available
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
