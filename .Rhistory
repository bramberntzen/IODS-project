library(ggplot2)
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
# look at the summary of the distances
summary(dist_eu)
dist_eu
# k-means clustering
km <-kmeans(Boston, centers = 3)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
# k-means clustering
km <-kmeans(Boston, centers = 3)
library(ggplot2)
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(Boston, centers = 3)
library(ggplot2)
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
# k-means clustering
km <-kmeans(Boston, centers = 3)
# k-means clustering
km <-kmeans(Boston)
# k-means clustering
km <-kmeans(Boston, centers = 10)
# k-means clustering
km <-kmeans(Boston, centers = 4)
km
# k-means clustering
km <-kmeans(Boston, centers = 4)
library(ggplot2)
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(Boston, centers = 3)
km <-kmeans(Boston, centers = 3)
library(ggplot2)
set.seed(123)
# determine the maximum number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
#Exploration of datasets
str(hd)
# Read the “Human development” and “Gender inequality” datasets into R
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gi <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#Exploration of datasets
str(hd)
dim(hd)
str(gi)
dim(gi)
summary(hd)
summary(gi)
Lab_force_M <- Labour.Force.Participation.Rate..Male.
Lab_force_M <- "Labour.Force.Participation.Rate..Male."
summary(Lab_force_M)
str(Lab_force_M)
dim(Lab_force_M)
Lab_force_M <- c("Labour.Force.Participation.Rate..Male.")
dim(Lab_force_M)
str(Lab_force_M)
className(hd)
colnames(dh)
colnames(hd)
colnames(gii)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
colnames(gii)
colnames(df)[colnames(df) == 'HDI.Rank'] <- 'hrank'
HDI.Rank <- 'hrank'
sum hrank
sum(hrank)
sum(HDI.Rank)
str(HDI.Rank)
dim(HDI.Rank)
colnames(hd)
hrank <- colname(hd[1])
hrank <- colnames(hd[1])
dim(hd[1])
summary(hd[1])
summary(hrank)
colnames(hrank) <- colnames(hd[1])
colnames(hd[1])[colnames(hd[1]) == 'hd[1]'] <- 'hrank'
colnames(hd[1])
'hrank' <- colnames(hd[1])[colnames(hd[1]) == 'hd[1]']
colnames(hd[1])
colnames(hd)[2] <- hrank
colnames(hd)[1] <- "hrank"
colnames(hd)[1]
summary(hd)
colnames(hd)
colnames(hd)[1] <- "hrank"
colnames(hd)[2] <- "ctry"
colnames(hd)[3] <- "hdi"
colnames(hd)[4] <- "life_exp"
colnames(hd)[5] <- "exp_edu"
colnames(hd)[6] <- "yrs_edu"
colnames(hd)[7] <- "gni"
colnames(hd)[8] <- "gni_hdi"
colnames(hd)
colnames(gii)
colnames(hd)[1] <- "grank"
colnames(hd)[2] <- "ctry"
colnames(hd)[3] <- "gii"
colnames(hd)[4] <- "mat_mor"
colnames(hd)[5] <- "ado_bir"
colnames(hd)[6] <- "rep_par"
colnames(hd)[7] <- "sec_edu_m"
colnames(hd)[8] <- "sec_edu_f"
colnames(hd)[9] <- "lab_par_m"
colnames(hd)[10] <- "lab_par_f"
colnames(hd)[9] <- "lab_par_m"
colnames(hd)[10] <- "lab_par_f"
colnames(hd)[8] <- "sec_edu_f"
colnames(gii)
# Read the “Human development” and “Gender inequality” datasets into R
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#Exploration of datasets
str(hd)
dim(hd)
dim(gii)
str(gii)
summary(hd)
summary(gii)
colnames(hd)
colnames(gii)
colnames(hd)[1] <- "hrank"
colnames(hd)[2] <- "ctry"
colnames(hd)[3] <- "hdi"
colnames(hd)[4] <- "life_exp"
colnames(hd)[5] <- "exp_edu"
colnames(hd)[6] <- "yrs_edu"
colnames(hd)[7] <- "gni"
colnames(hd)[8] <- "gni_hdi"
colnames(hd)[1] <- "grank"
colnames(hd)[2] <- "ctry"
colnames(hd)[3] <- "gii"
colnames(hd)[4] <- "mat_mor"
colnames(hd)[5] <- "ado_bir"
colnames(hd)[6] <- "rep_par"
colnames(hd)[7] <- "sec_edu_m"
colnames(hd)[8] <- "sec_edu_f"
colnames(hd)[9] <- "lab_par_m"
colnames(hd)[10] <- "lab_par_f"
colnames(hd)
colnames(hd)[1] <- "hrank"
colnames(hd)[2] <- "ctry"
colnames(hd)[3] <- "hdi"
colnames(hd)[4] <- "life_exp"
colnames(hd)[5] <- "exp_edu"
colnames(hd)[6] <- "yrs_edu"
colnames(hd)[8] <- "gni_hdi"
colnames(hd)[7] <- "gni"
colnames(gii)[1] <- "grank"
colnames(gii)[3] <- "gii"
colnames(gii)[4] <- "mat_mor"
colnames(gii)[2] <- "ctry"
colnames(gii)[5] <- "ado_bir"
colnames(gii)[6] <- "rep_par"
colnames(gii)[7] <- "sec_edu_m"
colnames(gii)[8] <- "sec_edu_f"
colnames(gii)[10] <- "lab_par_f"
colnames(gii)[9] <- "lab_par_m"
colnames(hd)
colnames(gii)
# Read the “Human development” and “Gender inequality” datasets into R
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#check column names
colnames(hd)
colnames(gii)
#change column names of the hd and gii dataset
colnames(hd)[1] <- "hrank"
colnames(hd)[2] <- "ctry"
colnames(hd)[3] <- "hd_index"
colnames(hd)[4] <- "life_exp"
colnames(hd)[5] <- "exp_edu"
colnames(hd)[6] <- "yrs_edu"
colnames(hd)[7] <- "gni"
colnames(hd)[8] <- "gni_hdi"
colnames(gii)[1] <- "grank"
colnames(gii)[2] <- "ctry"
colnames(gii)[3] <- "gi_index"
colnames(gii)[5] <- "ado_bir"
colnames(gii)[4] <- "mat_mor"
colnames(gii)[6] <- "rep_par"
colnames(gii)[7] <- "sec_edu_m"
colnames(gii)[8] <- "sec_edu_f"
colnames(gii)[9] <- "lab_par_m"
colnames(gii)[10] <- "lab_par_f"
#check if column name change is successful
colnames(hd)
colnames(gii)
#mutate gender inequality data
gii <- mutate(gii, sec_edu_f_ctry = sec_edu_f / ctry)
str(ctry)
colnames(gii)[2] <- "ctry"
str(ctry)
str(gii$ctry)
str(gii$sec_edu_f)
sec_edu_f_ctry <- c( sec_edu_f, ctry)
colnames(gii)[8] <- "sec_edu_f"
sec_edu_f_ctry <- c(gii$sec_edu_f, gii$ctry)
summary(sec_edu_f_ctry)
str(sec_edu_f_ctry)
#mutate gii to create ratio of female and male population with secondary eduction, and with labour force participation
gii <- mutate (gii, sec_edu_ratio = sec_edu_f / sec_edu_m)
#mutate gii to create ratio of female and male population with secondary eduction, and with labour force participation
library(dplyr)
gii <- mutate (gii, sec_edu_ratio = sec_edu_f / sec_edu_m)
#join hd and gii datasets with identifier country (ctry)
human <- inner_join(hd, gii, by = "ctry")
str(human)
gii <- mutate (gii, lab_par_ratio = lab_par_f / lab_par_m)
#join hd and gii datasets with identifier country (ctry)
human <- inner_join(hd, gii, by = "ctry")
str(human)
write.csv(human, file = "C:/Users/Bram/Desktop/Open data science course/GitHub/IODS-project/data/human.csv", row.names = F)
test <- "C:/Users/Bram/Desktop/Open data science course/GitHub/IODS-project/data/human.csv"
str(test)
dim(test)
test <- read.csv("C:/Users/Bram/Desktop/Open data science course/GitHub/IODS-project/data/human.csv")
dim(test)
str(test)
cor_matrix <- cor(c(10, 5, 6, 13)) %>% round(digits = 2)
library(dplyr)
cor_matrix <- cor(c(10, 5, 6, 13)) %>% round(digits = 2)
trial <- c(10, 5, 6, 13, 20, 2, 15)
cor trial
cor(trial)
try <- c(1, 6, 3, 7, 4, 8)
cor(trial, try)
try <- c(1, 6, 3, 7, 4, 8, 14)
cor(trial, try)
corrplot(cor, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6))
corrplot(cor, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
librar(corrplot)
library(corrplot)
corrplot(cor, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
dis <- c(5, 5, 6, 23, 2, 6, 7)
cor(trial, try, dis)
cor <- trial, try, dis
cor <- trial + try + dis
str(cor)
cor <- c("trial", "try", "dis")
str(cor)
dim(cor)
cor <- c(trial, try, dis)
str(cor)
dim(cor)
cor <- data.frame(trial, try, dis)
str(cor)
dim(cor)
library(corrplot)
corrplot(cor, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
tri <- c(10, 5, 6, 13, 20, 2, 15)
try <- c(1, 6, 3, 7, 4, 8, 14)
dis <- c(5, 5, 6, 23, 2, 6, 7)
cor <- data.frame(tri, try, dis)
str(cor)
dim(cor)
library(corrplot)
corrplot(cor, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
corrplot(cor)
cor_matrix <- as.matrix(cor)
str(cor)
dim(cor)
library(corrplot)
corrplot(cor, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
tri <- c(2, 5, 6, 3, 4, 9, 8)
try <- c(1, 6, 3, 7, 4, 8, 10)
dis <- c(5, 5, 6, 3, 2, 6, 7)
cor <- data.frame(tri, try, dis)
cor_matrix <- as.matrix(cor)
str(cor)
dim(cor)
library(corrplot)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
corrplot(cor_matrix, is.corr = FALSE, method = "square")
tri <- c(2, 5, 6, 3, 4)
try <- c(1, 6, 3, 7, 4, 8)
dis <- c(5, 5, 6, 3, 2, 6, 7)
cor <- data.frame(tri, try, dis)
cor_matrix <- as.matrix(cor)
str(cor)
dim(cor)
library(corrplot)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
corrplot(cor_matrix, is.corr = FALSE, method = "square")
tri <- c(2, 5, 6, 3, 4)
try <- c(1, 6, 3, 7, 4)
dis <- c(5, 5, 6, 3, 2)
cor_matrix <- as.matrix(c(tri, try, dis)
str(cor)
dim(cor)
str(cor_matrix)
dim(cor_matrix)
tri <- c(2, 5, 6, 3, 4)
try <- c(1, 6, 3, 7, 4)
dis <- c(5, 5, 6, 3, 2)
cor_matrix <- as.matrix(c(tri, try, dis)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
library(corrplot)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
corrplot(cor_matrix, is.corr = FALSE, method = "square")
corrplot(cor_matrix, is.corr = FALSE, method = "square")
tri <- c(2, 5, 6, 3, 4)
try <- c(1, 6, 3, 7, 4)
dis <- c(5, 5, 6, 3, 2)
cor_matrix <- as.matrix(c(tri, try, dis)
corrplot(cor_matrix, is.corr = FALSE, method = "square")
library(corrplot)
corrplot(cor_matrix, is.corr = FALSE, method = "square")
tri <- c(2, 5, 6, 3, 4)
try <- c(1, 6, 3, 7, 4)
dis <- c(5, 5, 6, 3, 2)
cor_matrix <- as.matrix(c(tri, try, dis)
str(cor_matrix)
dim(cor_matrix)
library(corrplot)
corrplot(cor_matrix, is.corr = FALSE, method = "square")
corrplot(cor_matrix, is.corr = FALSE, method = "square")
cor_matrix <- as.matrix(c(tri, try, dis))
str(cor_matrix)
dim(cor_matrix)
library(corrplot)
corrplot(cor_matrix, is.corr = FALSE, method = "square")
cor_matrix <- as.matrix(tri, try, dis)
str(cor_matrix)
dim(cor_matrix)
library(corrplot)
corrplot(cor_matrix, is.corr = FALSE, method = "square")
cor <- as.data.frame(tri, try, dis)
tri <- c(2, 5, 6, 3, 4)
try <- c(1, 6, 3, 7, 4)
dis <- c(5, 5, 6, 3, 2)
cor <- as.data.frame(tri, try, dis)
cor <- data.frame(tri, try, dis)
cor_matrix <- as.matrix(tri, try, dis)
str(cor_matrix)
dim(cor_matrix)
library(dplyr)
tri <- c(2, 5, 6, 3, 4)
try <- c(1, 6, 3, 7, 4)
dis <- c(5, 5, 6, 3, 2)
cor <- data.frame(tri, try, dis)
cor_matrix <- as.matrix(tri, try, dis)
str(cor_matrix)
tri <- c(2, 5, 6, 3, 4)
try <- c(1, 6, 3, 7, 4)
dis <- c(5, 5, 6, 3, 2)
cor <- data.frame(tri, try, dis)
cor_matrix <- as.matrix(cor)
str(cor_matrix)
dim(cor_matrix)
library(corrplot)
corrplot(cor_matrix, is.corr = FALSE, method = "square")
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
tri <- c(2, 5, 6, 3)
cor <- data.frame(tri, try, dis)
knitr::opts_chunk$set(echo = TRUE)
library(FactoMineR)
data(tea)
str(tea)
dim(tea)
cor(tea)
ggpairs(tea)
# Access GGally
library(GGally)
ggpairs(tea)
knitr::opts_chunk$set(echo = TRUE)
library(FactoMineR)
library(FactoMineR)
data(tea)
# the tea dataset has 300 observations of 36 variables
str(tea)
dim(tea)
library(Hmisc)
hist.data.frame(human_)
hist.data.frame(tea)
# Access GGally
library(GGally)
ggpairs(tea)
knitr::opts_chunk$set(echo = TRUE)
pairs(tea)
pairs(as.numeric.tea)
tea2 <- as.numeric(tea)
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library(dplyr)
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library(tidyr)
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# Access GGally
library(GGally)
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# perform multiple correspondence analysis on the tea_time dataset
mca <- MCA(tea_time, graph = FALSE)
# perform multiple correspondence analysis on the tea_time dataset
mca <- mca(tea_time, graph = FALSE)
library(FactoMineR)
data(tea)
dim(tea)
# Access GGally
library(GGally)
# Access GGally
library(GGally)
ggpairs(tea)
knitr::opts_chunk$set(echo = TRUE)
library(FactoMineR)
library(FactoMineR)
data(tea)
library(FactoMineR)
data(tea)
# the tea dataset has 300 observations of 36 variables
str(tea)
dim(tea)
# Access GGally
library(GGally)
# the tea dataset has 300 observations of 36 variables
str(tea)
dim(tea)
# Access GGally
library(GGally)
library(dplyr)
library(tidyr)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# create new dataset with the variables we want to keep only
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# perform multiple correspondence analysis on the tea_time dataset
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
library(FactoMineR)
library(FactoMineR)
data(tea)
# the tea dataset has 300 observations of 36 variables
str(tea)
# the tea dataset has 300 observations of 36 variables
str(tea)
dim(tea)
# Access GGally
library(GGally)
library(tidyr)
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# visualize the smaller dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# create new dataset with the variables we want to keep only
tea_time <- select(tea, one_of(keep_columns))
# visualize the smaller dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
dim(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# look at the structure and dimensions of the data
str(tea_time)
# visualize MCA with a biplot
plot(mca, invisible=c("ind"), habillage = "quali")
# access relevant libraries for this section
library(FactoMineR)
library(GGally)
library(dplyr)
library(GGally)
library(dplyr)
library(tidyr)
data(tea)
setwd(C:/users/Bram/Desktop/Open data science course/Github/IODS-project)
setwd("C:/Users/Bram/Desktop/Open data science course/GitHub/IODS-project")
